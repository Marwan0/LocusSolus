/**
 * Lookup tables and algorithm taken from "Polygonising a scalar field" by Paul Bourke
 *
 * Original at: http://paulbourke.net/geometry/polygonise/
 */

#pragma kernel WireframeCage

Texture3D<half> _densityTexture;
Texture3D<float4> _colorTexture;

float _isoLevel;
float _lineWidth;
float4 _orientationVector;
float4 _sampleAxis0;
float4 _sampleAxis1;
float4 _sampleAxis2;

float _gridSizeRcp;
int _downsampleRate;

struct Vertex
{
	float3 vPosition;
	float3 vNormal;
    float3 vColor;
};

struct Triangle
{
	Vertex v[3];
};

AppendStructuredBuffer<Triangle> triangleRW;

SamplerState myLinearClampSampler;

static const int edgeTable[16] = {
	0x0,// 0b0000, 
	0x1,// 0b0001,
	0x2,// 0b0010,
	0x3,// 0b0011,
	0x4,// 0b0100, 
	0x5,// 0b0101,
	0x6,// 0b0110,
	0x7,// 0b0111,
	0x8,// 0b1000, 
	0x9,// 0b1001,
	0xa,// 0b1010,
	0xb,// 0b1011,
	0xc,// 0b1100, 
	0xd,// 0b1101,
	0xe,// 0b1110,
	0xf // 0b1111 
};

static const int lineTable[16][5] =
{ { -1, -1, -1, -1, -1 },//+
{ 0, 3, -1, -1, -1 },//+
{ 1, 0, -1, -1, -1 },//+-------
{ 1, 3, -1, -1, -1 },//+
{ 2, 1, -1, -1, -1 },//+
{ 0, 1, 3, 2, -1 },
{ 2, 0, -1, -1, -1 },//+
{ 2, 3, -1, -1, -1 },//+
{ 3, 2, -1, -1, -1 },//+
{ 0, 2, -1, -1, -1 },//+
{ 3, 0, 2, 1, -1 },
{ 1, 2, -1, -1, -1 },//+
{ 3, 1, -1, -1, -1 },//+
{ 0, 1, -1, -1, -1 },//+-------
{ 3, 0, -1, -1, -1 },//+
{ -1, -1, -1, -1, -1 } };//+

half SampleData(int3 pos) {
	return _densityTexture.Load(int4(pos, 0));
}

half SampleLinear(float3 p)
{
	// need to mitigate the offset in p[x], so +float3(0.5) to be in [0;1] range
	return _densityTexture.SampleLevel(myLinearClampSampler, p, 0).x;
}

half3 SampleLinearColor(float3 p)
{
	// need to mitigate the offset in p[x], so +float3(0.5) to be in [0;1] range
    return _colorTexture.SampleLevel(myLinearClampSampler, p + float3(0.5, 0.5, 0.5), 0).rgb;
}

float3 VertexInterp(float3 p1, float3 p2, float valp1, float valp2)
{
	return lerp(p1, p2, (_isoLevel - valp1) / (valp2 - valp1));
}

[numthreads(8, 8, 8)]
void WireframeCage(uint3 threadId : SV_DispatchThreadID)
{
	const float3 offset = float3(-0.5, -0.5, -0.5);
    const float3 orientation = _orientationVector.xyz;

	float3 p[4] = {
        threadId * _downsampleRate * _gridSizeRcp,
		(threadId + _sampleAxis0.xyz) * _downsampleRate * _gridSizeRcp,
		(threadId + _sampleAxis1.xyz) * _downsampleRate * _gridSizeRcp,
		(threadId + _sampleAxis2.xyz) * _downsampleRate * _gridSizeRcp
    };

	float val[4] = {
		//SampleData(threadId + int3(0, 0, 0)),
		//SampleData(threadId + (int3) (_sampleAxis0)),
		//SampleData(threadId + (int3) (_sampleAxis1)),
		//SampleData(threadId + (int3) (_sampleAxis2))
		SampleLinear(p[0]),
		SampleLinear(p[1]),
		SampleLinear(p[2]),
		SampleLinear(p[3])
    };

    p[0] += offset;
    p[1] += offset;
    p[2] += offset;
    p[3] += offset;

	int cubeIndex = 0;
	if (val[0] < _isoLevel) cubeIndex |= 1;
	if (val[1] < _isoLevel) cubeIndex |= 2;
	if (val[2] < _isoLevel) cubeIndex |= 4;
	if (val[3] < _isoLevel) cubeIndex |= 8;

	float3 vertlist[4];

	if (edgeTable[cubeIndex] != 0)
	{
		if (edgeTable[cubeIndex] & 1)
			vertlist[0] = VertexInterp(p[0], p[1], val[0], val[1]);
		if (edgeTable[cubeIndex] & 2)
			vertlist[1] = VertexInterp(p[1], p[2], val[1], val[2]);
		if (edgeTable[cubeIndex] & 4)
			vertlist[2] = VertexInterp(p[2], p[3], val[2], val[3]);
		if (edgeTable[cubeIndex] & 8)
			vertlist[3] = VertexInterp(p[3], p[0], val[3], val[0]);

        for (int i = 0; lineTable[cubeIndex][i] != -1; i += 2)
        {
			Triangle t;

			Vertex v0;
			Vertex v1;
			Vertex v2;

            v0.vPosition = vertlist[lineTable[cubeIndex][i]];
            v1.vPosition = vertlist[lineTable[cubeIndex][i + 1]];

            float3 edge = (v1.vPosition - v0.vPosition);
            float3 side = _orientationVector.xyz;

            if(length(edge) > 0.00001)
                side = normalize(cross(edge, orientation));
            //float3 up = cross(side, upVector);

            v2.vPosition = vertlist[lineTable[cubeIndex][i + 1]] + side * _gridSizeRcp * _lineWidth;

            v0.vNormal = -_orientationVector.xyz;
            v1.vNormal = -_orientationVector.xyz;
            v2.vNormal = -_orientationVector.xyz;

            v0.vColor = SampleLinearColor(v0.vPosition);
            v1.vColor = SampleLinearColor(v1.vPosition);
            v2.vColor = SampleLinearColor(v2.vPosition);
 
			t.v[0] = v0;
			t.v[1] = v1;
			t.v[2] = v2;

            triangleRW.Append(t);

            v1.vPosition = vertlist[lineTable[cubeIndex][i + 1]] + side * _gridSizeRcp * _lineWidth;
            v0.vPosition = vertlist[lineTable[cubeIndex][i]];
            v2.vPosition = vertlist[lineTable[cubeIndex][i]] + side * _gridSizeRcp * _lineWidth;

            v0.vNormal = -_orientationVector.xyz;
            v1.vNormal = -_orientationVector.xyz;
            v2.vNormal = -_orientationVector.xyz;

            t.v[0] = v0;
            t.v[1] = v1;
            t.v[2] = v2;

            triangleRW.Append(t);
        }
	}
}
